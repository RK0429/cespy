#!/usr/bin/env python3
"""
Circuit Editing and Manipulation Examples

This example demonstrates how to programmatically edit and manipulate
circuit schematics and netlists using CESPy editors.
"""

import os
import sys
from pathlib import Path

# Add the cespy package to the path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from cespy.editor import AscEditor, SpiceEditor, QschEditor
from cespy.editor.base_editor import ComponentFactory
from cespy import SimRunner, LTspice


def example_asc_editor():
    """Demonstrate LTSpice schematic (.asc) editing."""
    print("=== LTSpice Schematic Editing Example ===")
    
    # Create a basic RC circuit schematic
    asc_content = """Version 4
SHEET 1 880 680
WIRE 176 80 80 80
WIRE 304 80 176 80
WIRE 80 128 80 80
WIRE 176 128 176 80
WIRE 304 128 304 80
WIRE 80 240 80 208
WIRE 176 240 176 208
WIRE 176 240 80 240
WIRE 304 240 304 208
WIRE 304 240 176 240
FLAG 304 240 0
SYMBOL voltage 80 112 R0
SYMATTR InstName V1
SYMATTR Value SINE(0 1 1k)
SYMBOL res 160 112 R0
SYMATTR InstName R1
SYMATTR Value 1k
SYMBOL cap 288 112 R0
SYMATTR InstName C1
SYMATTR Value 1u
TEXT 56 264 Left 2 !.tran 0 10m 0 10u
"""
    
    # Save to temporary file
    asc_path = Path("temp_circuit.asc")
    with open(asc_path, 'w') as f:
        f.write(asc_content)
    
    try:
        # Initialize ASC editor
        editor = AscEditor(str(asc_path))
        
        print("Original circuit components:")
        components = editor.get_components()
        for comp in components:
            print(f"  {comp}")
        
        # Modify component values
        print("\nModifying component values...")
        editor.set_component_value('R1', '2.2k')
        editor.set_component_value('C1', '470n')
        editor.set_component_value('V1', 'SINE(0 5 2k)')
        
        # Add a new component (inductor)
        print("Adding inductor...")
        editor.add_component('ind', 'L1', value='10m', 
                           position1=(350, 80), position2=(450, 80))
        
        # Modify simulation commands
        print("Updating simulation command...")
        editor.remove_instruction('.tran 0 10m 0 10u')
        editor.add_instruction('.tran 0 20m 0 20u')
        editor.add_instruction('.ac dec 10 1 100k')
        
        # Save the modified circuit
        output_path = asc_path.with_name('modified_circuit.asc')
        editor.save_netlist(str(output_path))
        
        print(f"✓ Modified circuit saved to {output_path}")
        
        # Verify changes
        print("\nVerifying changes...")
        with open(output_path, 'r') as f:
            content = f.read()
            if '2.2k' in content and '470n' in content:
                print("✓ Component values updated successfully")
            if '.tran 0 20m 0 20u' in content:
                print("✓ Simulation command updated successfully")
        
    except Exception as e:
        print(f"Error in ASC editing: {e}")
    finally:
        # Cleanup
        for path in [asc_path, Path('modified_circuit.asc')]:
            if path.exists():
                path.unlink()


def example_spice_editor():
    """Demonstrate SPICE netlist editing."""
    print("\n=== SPICE Netlist Editing Example ===")
    
    # Create a SPICE netlist
    netlist_content = """* Operational Amplifier Circuit
* Generated by example

V1 vin 0 AC 1 0
R1 vin n1 10k
R2 n1 vout 100k
C1 n1 vout 1p
XU1 0 n1 vcc vee vout OPAMP
V_VCC vcc 0 DC 15
V_VEE vee 0 DC -15

.subckt OPAMP in+ in- vcc vee out
* Simple opamp model
Rin in+ in- 1meg
Rout out_int out 75
E1 out_int 0 in+ in- 100000
.ends OPAMP

.ac dec 10 1 1meg
.end
"""
    
    # Save to temporary file
    netlist_path = Path("temp_opamp.net")
    with open(netlist_path, 'w') as f:
        f.write(netlist_content)
    
    try:
        # Initialize SPICE editor
        editor = SpiceEditor(str(netlist_path))
        
        print("Original netlist analysis:")
        
        # Get components
        components = editor.get_components()
        print(f"Components found: {len(components)}")
        for comp in components[:5]:  # Show first 5
            print(f"  {comp}")
        
        # Get parameters
        params = editor.get_parameters()
        print(f"Parameters: {params}")
        
        # Modify component values
        print("\nModifying circuit...")
        editor.set_component_value('R1', '22k')
        editor.set_component_value('R2', '220k')
        editor.set_component_value('C1', '10p')
        
        # Add parameters for easy modification
        editor.set_parameter('gain_R', '220k')
        editor.set_parameter('input_R', '22k')
        
        # Replace fixed values with parameters
        editor.set_component_value('R1', '{input_R}')
        editor.set_component_value('R2', '{gain_R}')
        
        # Add analysis commands
        editor.add_instruction('.param gain_R=220k')
        editor.add_instruction('.param input_R=22k')
        editor.add_instruction('.noise v(vout) V1 dec 10 1 1meg')
        
        # Save modified netlist
        output_path = netlist_path.with_name('modified_opamp.net')
        editor.save_netlist(str(output_path))
        
        print(f"✓ Modified netlist saved to {output_path}")
        
        # Validate the circuit
        print("Validating circuit...")
        if editor.validate_circuit():
            print("✓ Circuit validation passed")
        else:
            print("⚠ Circuit validation warnings found")
        
    except Exception as e:
        print(f"Error in SPICE editing: {e}")
    finally:
        # Cleanup
        for path in [netlist_path, Path('modified_opamp.net')]:
            if path.exists():
                path.unlink()


def example_component_factory():
    """Demonstrate using ComponentFactory for creating components."""
    print("\n=== Component Factory Example ===")
    
    try:
        # Create components using factory
        factory = ComponentFactory()
        
        print("Creating standard components...")
        
        # Create a resistor
        resistor = factory.create_resistor(
            name='R_load',
            value='50',
            nodes=['input', 'output']
        )
        print(f"Resistor: {resistor}")
        
        # Create a capacitor
        capacitor = factory.create_capacitor(
            name='C_coupling',
            value='100n',
            nodes=['signal', 'amp_in']
        )
        print(f"Capacitor: {capacitor}")
        
        # Create an inductor
        inductor = factory.create_inductor(
            name='L_choke',
            value='1m',
            nodes=['vcc', 'amp_vcc']
        )
        print(f"Inductor: {inductor}")
        
        # Create a voltage source
        voltage_source = factory.create_voltage_source(
            name='V_supply',
            value='DC 12',
            nodes=['vcc', '0']
        )
        print(f"Voltage source: {voltage_source}")
        
        # Create a current source
        current_source = factory.create_current_source(
            name='I_bias',
            value='DC 1m',
            nodes=['bias_node', '0']
        )
        print(f"Current source: {current_source}")
        
        # Create complex components
        print("\nCreating complex components...")
        
        # Create an operational amplifier
        opamp = factory.create_opamp(
            name='U1',
            model='LM358',
            nodes=['in_pos', 'in_neg', 'vcc', 'vee', 'output']
        )
        print(f"Op-amp: {opamp}")
        
        # Create a MOSFET
        mosfet = factory.create_mosfet(
            name='M1',
            model='IRF540',
            nodes=['drain', 'gate', 'source', 'bulk'],
            device_type='NMOS'
        )
        print(f"MOSFET: {mosfet}")
        
        print("✓ Component factory examples completed")
        
    except Exception as e:
        print(f"Error in component factory: {e}")


def example_parametric_design():
    """Demonstrate parametric circuit design."""
    print("\n=== Parametric Circuit Design Example ===")
    
    # Create a parametric filter design
    netlist_content = """* Parametric Sallen-Key Low-pass Filter
* Design parameters
.param fc=1k            ; Corner frequency
.param Q=0.707          ; Quality factor
.param gain=1           ; DC gain

* Calculate component values
.param R_val={1/(2*pi*fc*C_val)}
.param C_val=100n
.param R1_val={R_val}
.param R2_val={R_val}
.param C1_val={C_val}
.param C2_val={C_val/(4*Q*Q)}

* Circuit
V1 vin 0 AC 1 0
R1 vin n1 {R1_val}
R2 n1 vout {R2_val}
C1 n1 n2 {C1_val}
C2 n2 0 {C2_val}
XU1 vin n2 vcc vee vout OPAMP
V_VCC vcc 0 DC 15
V_VEE vee 0 DC -15

.subckt OPAMP in+ in- vcc vee out
Rin in+ in- 1meg
E1 out 0 in+ in- 100000
Rout out 0 100
.ends

.ac dec 20 1 100k
.end
"""
    
    netlist_path = Path("temp_parametric.net")
    with open(netlist_path, 'w') as f:
        f.write(netlist_content)
    
    try:
        editor = SpiceEditor(str(netlist_path))
        
        print("Original parametric design:")
        params = editor.get_parameters()
        for param, value in params.items():
            print(f"  {param} = {value}")
        
        # Create design variations
        design_variants = [
            {'fc': '500', 'Q': '0.5'},    # Lower freq, lower Q
            {'fc': '2k', 'Q': '1.0'},     # Higher freq, higher Q
            {'fc': '5k', 'Q': '2.0'},     # Much higher freq, very high Q
        ]
        
        print("\nGenerating design variants...")
        
        for i, variant in enumerate(design_variants):
            print(f"\nVariant {i+1}: fc={variant['fc']}Hz, Q={variant['Q']}")
            
            # Apply parameter changes
            for param, value in variant.items():
                editor.set_parameter(param, value)
            
            # Save variant
            variant_path = netlist_path.with_name(f'filter_variant_{i+1}.net')
            editor.save_netlist(str(variant_path))
            
            print(f"  ✓ Saved to {variant_path}")
            
            # Clean up variant file
            if variant_path.exists():
                variant_path.unlink()
        
        print("✓ Parametric design examples completed")
        
    except Exception as e:
        print(f"Error in parametric design: {e}")
    finally:
        if netlist_path.exists():
            netlist_path.unlink()


def example_circuit_validation():
    """Demonstrate circuit validation and error checking."""
    print("\n=== Circuit Validation Example ===")
    
    # Create a circuit with potential issues
    problematic_netlist = """* Circuit with issues for validation demo
V1 vin 0 DC 5
R1 vin n1 1k
R2 n1 floating_node 2k
C1 n1 0 1u
L1 n1 n2 1m
; Missing connection for floating_node
; L1 not connected to anything on n2 side

.tran 1m
; Missing time specification
.end
"""
    
    netlist_path = Path("temp_problematic.net")
    with open(netlist_path, 'w') as f:
        f.write(problematic_netlist)
    
    try:
        editor = SpiceEditor(str(netlist_path))
        
        print("Validating problematic circuit...")
        
        # Check for common issues
        validation_results = editor.validate_circuit()
        
        if validation_results:
            print("✓ Circuit passed basic validation")
        else:
            print("⚠ Circuit validation found issues")
        
        # Check for floating nodes
        print("\nChecking for floating nodes...")
        floating_nodes = editor.find_floating_nodes()
        if floating_nodes:
            print(f"⚠ Floating nodes found: {floating_nodes}")
        else:
            print("✓ No floating nodes detected")
        
        # Check connectivity
        print("Checking circuit connectivity...")
        connected_nodes = editor.get_connected_nodes()
        print(f"Connected node groups: {len(connected_nodes)}")
        
        # Fix the circuit
        print("\nFixing circuit issues...")
        
        # Connect the floating node
        editor.set_component_value('R2', '2k')  # Ensure proper connection
        editor.add_component('resistor', 'R3', 
                           nodes=['floating_node', '0'], value='10k')
        
        # Fix the simulation command
        editor.remove_instruction('.tran 1m')
        editor.add_instruction('.tran 0 10m 0 10u')
        
        # Connect L1 properly
        editor.add_component('resistor', 'R_load', 
                           nodes=['n2', '0'], value='50')
        
        # Save fixed circuit
        fixed_path = netlist_path.with_name('fixed_circuit.net')
        editor.save_netlist(str(fixed_path))
        
        print(f"✓ Fixed circuit saved to {fixed_path}")
        
        # Re-validate
        fixed_editor = SpiceEditor(str(fixed_path))
        if fixed_editor.validate_circuit():
            print("✓ Fixed circuit passes validation")
        
    except Exception as e:
        print(f"Error in circuit validation: {e}")
    finally:
        # Cleanup
        for path in [netlist_path, Path('fixed_circuit.net')]:
            if path.exists():
                path.unlink()


def main():
    """Run all circuit editing examples."""
    print("CESPy Circuit Editing Examples")
    print("=" * 50)
    
    # Run all examples
    example_asc_editor()
    example_spice_editor()
    example_component_factory()
    example_parametric_design()
    example_circuit_validation()
    
    print("\n" + "=" * 50)
    print("Circuit editing examples completed!")
    print("\nKey capabilities demonstrated:")
    print("- LTSpice schematic (.asc) editing")
    print("- SPICE netlist manipulation")
    print("- Component creation and modification")
    print("- Parametric design workflows")
    print("- Circuit validation and error checking")


if __name__ == "__main__":
    main()